"""
Django settings for empleado project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from django.core.exceptions import ImproperlyConfigured
import json
import saml2
import saml2.saml
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from unipath import Path
BASE_DIR = Path(__file__).ancestor(3)
#BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
secret = []
try:
    with open("secret.json") as f:
        secret = json.loads(f.read())
except:
    pass

def get_secret(secret_name, secrets=secret):

    try:
        return secrets[secret_name]
    except:
        msg = f'la varaible {secret_name} no existe'
        #raise ImproperlyConfigured(msg)





# Application definition

DJANGO_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # local apps
)

LOCAL_APPS = (
    'applications.users',
    'applications.cerveza',
    'applications.pedidos',
)

THIRD_PARTY_APPS = (
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'djangosaml2', #SAML
)

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'djangosaml2.middleware.SamlSessionMiddleware', #SAML
]

ROOT_URLCONF = 'embotelladora.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.child('templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'embotelladora.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'
# SAML
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'djangosaml2.backends.Saml2Backend',
)

SAML_CONFIG = {
  # full path to the xmlsec1 binary programm
  'xmlsec_binary': '/usr/bin/xmlsec1',

  # your entity id, usually your subdomain plus the url to the metadata view
  'entityid': 'https://embotelladora.herokuapp.com/saml2/metadata/',

  # directory with attribute mapping
  'attribute_map_dir': Path.join(BASE_DIR, 'attribute-maps'),

  # this block states what services we provide
  'service': {
      # we are just a lonely SP
      'sp' : {
          'name': 'Federated Django sample SP',
          'name_id_format': saml2.saml.NAMEID_FORMAT_PERSISTENT,

          # For Okta add signed logout requets. Enable this:
          # "logout_requests_signed": True,

          'endpoints': {
              # url and binding to the assetion consumer service view
              # do not change the binding or service name
              'assertion_consumer_service': [
                  ('https://embotelladora.herokuapp.com/saml2/metadata/saml2/acs/',
                   saml2.BINDING_HTTP_POST),
                  ],
              # url and binding to the single logout service view
              # do not change the binding or service name
              'single_logout_service': [
                  # Disable next two lines for HTTP_REDIRECT for IDP's that only support HTTP_POST. Ex. Okta:
                  ('https://embotelladora.herokuapp.com/saml2/metadata/saml2/acs/saml2/ls/',
                   saml2.BINDING_HTTP_REDIRECT),
                  ('https://embotelladora.herokuapp.com/saml2/metadata/saml2/acs/saml2/ls/post',
                   saml2.BINDING_HTTP_POST),
                  ],
              },
           # Mandates that the identity provider MUST authenticate the
           # presenter directly rather than rely on a previous security context.
          'force_authn': False,

           # Enable AllowCreate in NameIDPolicy.
          'name_id_format_allow_create': False,

           # attributes that this project need to identify a user
          'required_attributes': ['email'],

           # attributes that may be useful to have but not required
          'optional_attributes': ['nombres', 'apellidos'],

          # in this section the list of IdPs we talk to are defined
          # This is not mandatory! All the IdP available in the metadata will be considered.
          'idp': {
              # we do not need a WAYF service since there is
              # only an IdP defined here. This IdP should be
              # present in our metadata

              # the keys of this dictionary are entity ids

              },
          },
      },

  # where the remote metadata is stored, local, remote or mdq server.
  # One metadatastore or many ...
  'metadata': {
      'local': [],
      'remote': [{"url": "https://grovity.my.salesforce.com/.well-known/samlidp.xml",
                  "disable_ssl_certificate_validation": True},],
      'mdq': []
      },

  # set to 1 to output debugging information
  'debug': 1,

  # Signing
  'key_file': Path.join(BASE_DIR, 'private.key'),  # private part
  'cert_file': Path.join(BASE_DIR, 'public.pem'),  # public part

  # Encryption
  'encryption_keypairs': [{
      'key_file': Path.join(BASE_DIR, 'private.key'),  # private part
      'cert_file': Path.join(BASE_DIR, 'public.pem'),  # public part
  }],

  # own metadata settings
  'contact_person': [
      {'given_name': 'Tony',
       'sur_name': 'Tony',
       'company': 'Grovity',
       'email_address': 'jodmunozol@unal.edu.co',
       'contact_type': 'technical'},
      ],
  # you can set multilanguage information here
  'organization': {
      'name': [('Grovity', 'es'), ('Grovity', 'en')],
      'display_name': [('Grovity', 'es'), ('Grovity', 'en')],
      'url': [('https://www.grovity.co/', 'es'), ('https://www.grovity.co/', 'en')],
      },
  }
SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'email'
SAML_CREATE_UNKNOWN_USER = True
ACS_DEFAULT_REDIRECT_URL = reverse_lazy('pedido')
SAML_ATTRIBUTE_MAPPING = {
    'uid': ('username', ),
    'mail': ('email', ),
    'cn': ('nombres', ),
    'sn': ('apellidos', ),
}

#Token auth
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', ]
}
#Cors
CORS_ORIGIN_ALLOW_ALL = True
ALLOWED_HOSTS = ['*']
# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'es-co'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
